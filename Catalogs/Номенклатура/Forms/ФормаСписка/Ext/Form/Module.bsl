
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ТекущиеДанныеСписка()
	
	//Если Элементы.СтраницыСписков.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатура Тогда
	//	ТекущиеДанные = ТекущиеДанныеДинамическогоСписка(Элементы.СписокРасширенныйПоискНоменклатура);
	//Иначе
	//	ТекущиеДанные = ТекущиеДанныеДинамическогоСписка(Элементы.СписокСтандартныйПоискНоменклатура);
	//КонецЕсли;
	//
	//Возврат ТекущиеДанные;
	
КонецФункции

// Возвращает текущие данные динамического списка.
//
// Параметры:
//  Список  - <ДинамическийСписок> - динамический список.
//
// Возвращаемое значение:
//   <ДанныеФормыСтруктура>   - текущие данные списка.
//          Если в списке нет активной строки или активной является строка группировки - возвращается Неопределено.
//
&НаКлиенте
Функция ТекущиеДанныеДинамическогоСписка(Список)
	
	Если Список.ТекущиеДанные = Неопределено Тогда // Нет текущей строки.
		Возврат Неопределено;
	ИначеЕсли Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") 
		И Список.ТекущиеДанные.ГруппировкаСтроки <> Неопределено Тогда // Это строка группировки.
		Возврат Неопределено;
	Иначе
		Возврат Список.ТекущиеДанные;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВидыНоменклатурыПриАктивизацииПосле()
	
	УправлениеСписком();
	
КонецПроцедуры


#Область Корзина

&НаКлиенте
Процедура ОткрытьКорзину()
	
	Если Корзина.Количество() > 0 Тогда
		ПараметрыКорзины = ЗаписатьПодборВХранилище();
		ОткрытьКорзинуПродолжить(ПараметрыКорзины);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорзинуПродолжить(ПараметрыКорзины)
	
	//ПередаваемыеПараметры = Новый Структура;
	//ПередаваемыеПараметры.Вставить("АдресКорзиныВХранилище", 
	//	?(ЗначениеЗаполнено(ПараметрыКорзины), ПараметрыКорзины.АдресКорзиныВХранилище, Неопределено));
	//ПередаваемыеПараметры.Вставить("ОтборВидЦен", ОтборВидЦен);
	//ПередаваемыеПараметры.Вставить("ОтборСклад", ОтборСклад);
	//ПередаваемыеПараметры.Вставить("ПоказыватьСвободныеОстатки", ПоказыватьСвободныеОстатки);
	//ПередаваемыеПараметры.Вставить("ДокументОткрытый", ДокументОткрытый);
	//
	//ПередаваемыеПараметры.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	//ОповещениеКорзинаЗакрытие = Новый ОписаниеОповещения("КорзинаЗакрытие",ЭтотОбъект);
	//ОткрытьФорму(
	//	"Обработка.ПанельИнформацииНоменклатуры.Форма.ФормаКорзина",
	//	ПередаваемыеПараметры, 
	//	ЭтотОбъект,
	//	,
	//	,
	//	,
	//	ОповещениеКорзинаЗакрытие,
	//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗакрытие(ПараметрЗакрытия, Параметры) Экспорт

	Корзина.Очистить();
	
	Если ПараметрЗакрытия = Неопределено Тогда
		//Закрытие без сохранения
	ИначеЕсли ПараметрЗакрытия="ПеренестиВДокумент" Тогда
		//Закрытие без сохранения
	Иначе 
		//Закрытие с сохранением
		Для каждого СтрокаКорзины Из ПараметрЗакрытия.Корзина Цикл
			НоваяСтрокаКорзины = Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКорзины, СтрокаКорзины);
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(ВыбранныеСтроки, ЗапрашиватьКоличество = Ложь) Экспорт
	
	Если ТипЗнч(ВыбранныеСтроки) = Тип("Массив") Тогда
		Для Каждого ВыделеннаяСтрока Из ВыбранныеСтроки Цикл
			ДобавитьСтрокуВКорзину(ВыделеннаяСтрока, ЗапрашиватьКоличество);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = Тип("СправочникСсылка.Номенклатура") ИЛИ 
		ТипЗнч(ВыбранныеСтроки) = Тип("ДанныеФормыСтруктура") Тогда
		
		ДобавитьСтрокуВКорзину(ВыбранныеСтроки, ЗапрашиватьКоличество);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеСтрокиАналогов(Строка)
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Ссылка", Строка.Аналог);
	ДанныеСтроки.Вставить("Цена", Строка.Цена);
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиСписка(ВыделеннаяСтрока)
	
	//Если ТипЗнч(ВыделеннаяСтрока) = Тип("СправочникСсылка.Номенклатура") Тогда
	//	Если Элементы.СтраницыСписков.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатура Тогда
	//		ДанныеСтроки = Элементы.СписокРасширенныйПоискНоменклатура.ДанныеСтроки(ВыделеннаяСтрока);
	//	Иначе
	//		ДанныеСтроки = Элементы.СписокСтандартныйПоискНоменклатура.ДанныеСтроки(ВыделеннаяСтрока);
	//	КонецЕсли;
	//ИначеЕсли ВыделеннаяСтрока.Свойство("Аналог") Тогда
	//	ДанныеСтроки = ДанныеСтрокиАналогов(ВыделеннаяСтрока);
	//Иначе
	//	ДанныеСтроки = Неопределено;
	//КонецЕсли;
	//
	//Возврат ДанныеСтроки;

КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуВКорзину(ВыделеннаяСтрока, ЗапрашиватьКоличество)
	
	Если ТипЗнч(ВыделеннаяСтрока) = Тип("ДанныеФормыСтруктура") Тогда
		ДанныеСтроки = ВыделеннаяСтрока;
	Иначе
		ДанныеСтроки = ДанныеСтрокиСписка(ВыделеннаяСтрока);
	КонецЕсли;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = СтруктураВыбора();
	ЗаполнитьЗначенияСвойств(СтруктураВыбора, ДанныеСтроки);
	СтруктураВыбора.Номенклатура            = ДанныеСтроки.Ссылка;
	СтруктураВыбора.Количество              = 1;
	СтруктураВыбора.ЗапрашиватьКоличество   = ЗапрашиватьКоличество;
	СтруктураВыбора.ВызватьУправлениеФормой = ЗапрашиватьКоличество;
	
	Если СтруктураВыбора.ИспользуютсяХарактеристики Тогда
		ДополнитьСтруктуруВыбораХарактеристикой(СтруктураВыбора);
	Иначе
		ДобавитьНоменклатуруВКорзинуЗапроситьКоличество(СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВКорзинуЗавершение(Результат, СтруктураВыбора) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора.Упаковка           = Результат.Упаковка;
	СтруктураВыбора.Количество         = Результат.Количество;
	СтруктураВыбора.КоличествоУпаковок = Результат.КоличествоУпаковок;
	СтруктураВыбора.Коэффициент        = Результат.Коэффициент;
	
	СтруктураПоискаВКорзине = Новый Структура;
	СтруктураПоискаВКорзине.Вставить("Номенклатура",               СтруктураВыбора.Номенклатура);
	Если ЗначениеЗаполнено(СтруктураВыбора.Упаковка) Тогда
		СтруктураПоискаВКорзине.Вставить("Упаковка",               СтруктураВыбора.Упаковка);
	КонецЕсли;
	СтруктураПоискаВКорзине.Вставить("ИспользуютсяХарактеристики", СтруктураВыбора.ИспользуютсяХарактеристики);
	Если СтруктураВыбора.ИспользуютсяХарактеристики Тогда
		СтруктураПоискаВКорзине.Вставить("Характеристика", СтруктураВыбора.Характеристика);
	КонецЕсли;
	
	НайденныеСтроки = Корзина.НайтиСтроки(СтруктураПоискаВКорзине);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаКорзины = Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорзины, СтруктураВыбора);
	Иначе
		СтрокаКорзины                    = НайденныеСтроки[0];
		СтрокаКорзины.Количество         = СтрокаКорзины.Количество + СтруктураВыбора.Количество;
		СтрокаКорзины.КоличествоУпаковок = СтрокаКорзины.КоличествоУпаковок + СтруктураВыбора.КоличествоУпаковок;
		//Если цена изменилась - перезаполняем новым значением
		СтрокаКорзины.Цена               = СтруктураВыбора.Цена;
	КонецЕсли;
	
	// Установим цену по коэффициенту упаковок.
	СтрокаКорзины.Цена = СтруктураВыбора.Цена * Результат.Коэффициент;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаКорзины, СтруктураДействий, Неопределено);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор товаров'")
		,
		,
		НСтр("ru = 'Товар "+СтруктураВыбора.Номенклатура+" добавлен в корзину'"));
		
	Если СтруктураВыбора.ВызватьУправлениеФормой Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтруктуруВыбораХарактеристикой(СтруктураВыбора)

	//ОписаниеОповещения = Новый ОписаниеОповещения("ДополнитьСтруктуруВыбораХарактеристикойЗавершение", ЭтотОбъект, СтруктураВыбора);
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("Номенклатура", СтруктураВыбора.Номенклатура);
	//Если ЗначениеЗаполнено(ОтборСклад) Тогда
	//	МассивСкладов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборСклад);
	//Иначе
	//	МассивСкладов = ВсеСклады;
	//КонецЕсли;
	//СтруктураПараметров.Вставить("ОтборСклад", МассивСкладов);
	//СтруктураПараметров.Вставить("ВидЦены", ОтборВидЦен);
	//СтруктураПараметров.Вставить("ПоказыватьСвободныеОстатки", ПоказыватьСвободныеОстатки);
	//
	//ОткрытьФорму(
	//	"Обработка.ПанельИнформацииНоменклатуры.Форма.ФормаВыбораХарактеристики", 
	//	СтруктураПараметров, 
	//	ЭтотОбъект,
	//	,
	//	,
	//	,
	//	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтруктуруВыбораХарактеристикойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Если Результат = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//ДополнительныеПараметры.Характеристика          = Результат;
	//ДополнительныеПараметры.ВызватьУправлениеФормой = Истина;
	//ДополнительныеПараметры.Цена = ЦенаНоменклатуры(
	//	ДополнительныеПараметры.Номенклатура,
	//	Результат, ОтборВидЦен,
	//	,
	//	ДополнительныеПараметры.Цена);
	//	
	//ДобавитьНоменклатуруВКорзинуЗапроситьКоличество(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦенаНоменклатуры(Номенклатура, Характеристика, ВидЦены, Упаковка, Цена)
	//// TODO Сделать общий код с Корзиной
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Запрос.УстановитьПараметр("Характеристика", Характеристика);
	//Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|			,
	//|			Номенклатура = &Номенклатура
	//|				И Характеристика = &Характеристика
	//|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
	//
	//Если ЗначениеЗаполнено(Упаковка) Тогда
	//	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	//	Запрос.Текст = Запрос.Текст + "
	//	|ГДЕ
	//	|	ЦеныНоменклатурыСрезПоследних.Упаковка = &Упаковка";
	//КонецЕсли;
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Возврат Выборка.Цена;
	//Иначе
	//	Возврат Цена;
	//КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНоменклатуруВКорзинуЗапроситьКоличество(СтруктураВыбора)
	
	//ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСтрокуВКорзинуЗавершение", ЭтотОбъект, СтруктураВыбора);
	//
	//Если СтруктураВыбора.ЗапрашиватьКоличество Тогда
	//	ОткрытьФорму(
	//		"Обработка.ПанельИнформацииНоменклатуры.Форма.ФормаКоличествоУпаковок", 
	//		СтруктураВыбора,
	//		ЭтотОбъект,
	//		,
	//		,
	//		,
	//		ОписаниеОповещения,
	//		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//Иначе
	//	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураВыбора);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураВыбора()
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("Номенклатура");
	СтруктураВыбора.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
	СтруктураВыбора.Вставить("Цена", 0);
	СтруктураВыбора.Вставить("Количество", 0);
	СтруктураВыбора.Вставить("КоличествоУпаковок", 1);
	СтруктураВыбора.Вставить("Коэффициент", 1);
	СтруктураВыбора.Вставить("ИспользуютсяХарактеристики", Ложь);
	СтруктураВыбора.Вставить("Характеристика");
	СтруктураВыбора.Вставить("ЗапрашиватьКоличество", Ложь);
	СтруктураВыбора.Вставить("ВызватьУправлениеФормой", Ложь);
	
	Возврат СтруктураВыбора;
	
КонецФункции

&НаСервере
// Функция помещает результаты подбора в хранилище
//
// Возвращает структуру:
//	Структура
//		- Адрес в хранилище, куда помещена выбранная номенклатура (корзина);
//		- Уникальный идентификатор формы владельца, необходим для идентификации при обработке результатов подбора;
//
Функция ЗаписатьПодборВХранилище() 
	
	ПодобранныеТовары = Корзина.Выгрузить();
	АдресКорзиныВХранилище = ПоместитьВоВременноеХранилище(ПодобранныеТовары, УникальныйИдентификатор);
	Возврат Новый Структура("АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца", АдресКорзиныВХранилище, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Функция ПараметрыСозданияДокумента()

	//ДанныеЗаполнения = Новый Структура;
	//ДанныеЗаполнения.Вставить("ВидЦен", ОтборВидЦен);
	//Если ЗначениеЗаполнено(ОтборСклад) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборСклад, "ЭтоГруппа") Тогда
	//	ДанныеЗаполнения.Вставить("Склад", ОтборСклад);
	//КонецЕсли;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Корзина");
	//ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	//ПараметрыФормы.Вставить("ПараметрыКорзины", ЗаписатьПодборВХранилище());
	////ПараметрыФормы.Вставить("ВидЦен", ОтборВидЦен);
	//Если ЗначениеЗаполнено(ОтборСклад) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборСклад, "ЭтоГруппа") Тогда
	//	ПараметрыФормы.Вставить("Склад", ОтборСклад);
	//КонецЕсли;
	//
	//Возврат ПараметрыФормы;
	//
КонецФункции

&НаКлиенте
Функция НазваниеДокумента(ИмяДокумента)
	
	//СоответствиеИменДокументов = Новый Структура;
	//СоответствиеИменДокументов.Вставить("ЧекККМ", НСтр("ru='Чек ККМ'"));
	//СоответствиеИменДокументов.Вставить("ЗаказКлиента", НСтр("ru='Заказ клиента'"));
	//СоответствиеИменДокументов.Вставить("ЗаказПоставщику", НСтр("ru='Заказ поставщику'"));
	//СоответствиеИменДокументов.Вставить("РеализацияТоваровУслуг", НСтр("ru='Реализация товаров и услуг'"));
	//СоответствиеИменДокументов.Вставить("ПриобретениеТоваровУслуг", НСтр("ru='Приобретение товаров и услуг'"));
	//СоответствиеИменДокументов.Вставить("ПеремещениеТоваров", НСтр("ru='Перемещение товаров'"));
	//СоответствиеИменДокументов.Вставить("ЗаказНаПеремещение", НСтр("ru='Заказ на перемещение'"));
	//
	//Если СоответствиеИменДокументов.Свойство(ИмяДокумента) Тогда
	//	Возврат СоответствиеИменДокументов[ИмяДокумента];
	//Иначе
	//	Возврат ИмяДокумента;
	//КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СоздатьЗаказыПоставщикам()
	
	//ПараметрыФормы = ПараметрыСозданияДокумента();
	//ОткрытьФорму("Документ.ЗаказПоставщику.Форма.СозданиеЗаказовПоставщикамНаОсновании", ПараметрыФормы, ЭтотОбъект);
	//
	//Корзина.Очистить();
	//УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента)
	
	//Если ИмяДокумента = "ЧекККМ" Тогда
	//	ИмяФормыДокумента = "Документ.ЧекККМ.Форма.ФормаДокументаРМК";
	//Иначе
	//	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента);
	//КонецЕсли;
	//
	//ПараметрыФормы = ПараметрыСозданияДокумента();
	//
	//ОткрытаяФорма = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	//ЕстьОткрытыйДокумент = ЗначениеЗаполнено(ДокументОткрытый) И ТипЗнч(ДокументОткрытый) = Тип("ДокументСсылка."+ИмяДокумента);
	//Если ОткрытаяФорма.Открыта() ИЛИ ЕстьОткрытыйДокумент Тогда
	//	ДополнительныеПараметры = Новый Структура;
	//	// Для открытой формы передаем форму и параметр оповещения.
	//	ДополнительныеПараметры.Вставить("Форма", ОткрытаяФорма);
	//	ДополнительныеПараметры.Вставить("Параметр", 
	//		Новый Структура("ИмяДокумента, АдресКорзиныВХранилище", ИмяДокумента, ПараметрыФормы.ПараметрыКорзины.АдресКорзиныВХранилище));
	//	// Для новой формы передаем имя формы и параметры.
	//	ДополнительныеПараметры.Вставить("ИмяФормыДокумента", ИмяФормыДокумента);
	//	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	//	
	//	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ЕстьОткрытыйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//	ТекстВопроса = 
	//		СтрШаблон(НСтр("ru='Есть открытый ""%1"", оформленный из корзины.
	//		|Что сделать с набранным товаром?'"),
	//		НазваниеДокумента(ИмяДокумента));
	//	КнопкиВопроса = Новый СписокЗначений;
	//	КнопкиВопроса.Добавить("ДобавитьВОткрытый", НСтр("ru='Добавить в открытый'"));
	//	КнопкиВопроса.Добавить("СоздатьНовый", НСтр("ru='Создать новый'"));
	//	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, КнопкиВопроса);
	//Иначе
	//	
	//	ДополнительныеПараметры = Новый Структура;
	//	// Для открытой формы передаем форму и параметр оповещения.
	//	ДополнительныеПараметры.Вставить("Форма", ОткрытаяФорма);
	//	ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
	//	ДополнительныеПараметры.Вставить("Параметр", 
	//		Новый Структура("ИмяДокумента, АдресКорзиныВХранилище", ИмяДокумента, ПараметрыФормы.ПараметрыКорзины.АдресКорзиныВХранилище));
	//	// Для новой формы передаем имя формы и параметры.
	//	ДополнительныеПараметры.Вставить("ИмяФормыДокумента", ИмяФормыДокумента);
	//	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	//	
	//	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ДобавитьВСуществующийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//	ТекстВопроса = НСтр("ru='Что сделать с набранным товаром?'");
	//	КнопкиВопроса = Новый СписокЗначений;
	//	КнопкиВопроса.Добавить("ДобавитьВСуществующий", НСтр("ru='Добавить в существующий'"));
	//	КнопкиВопроса.Добавить("СоздатьНовый", НСтр("ru='Создать новый'"));
	//	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, КнопкиВопроса);
	//	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Если Результат = КодВозвратаДиалога.Отмена Тогда
	//	Возврат;
	//ИначеЕсли Результат = "СоздатьНовый" Тогда
	//	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект);
	//	ДополнительныеПараметры.Форма.Открыть();
	//	//ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	//	//ПараметрыФормы.КлючНазначенияИспользования = "НовыйДокументИзКорзины";
	//	//ОткрытьФорму(
	//	//	ДополнительныеПараметры.ИмяФормыДокумента,
	//	//	ПараметрыФормы,
	//	//	,
	//	//	Новый УникальныйИдентификатор,
	//	//	,
	//	//	,
	//	//	ОписаниеОповещения);
	//	Корзина.Очистить();
	//	УправлениеФормой(ЭтотОбъект);
	//ИначеЕсли Результат = "ДобавитьВСуществующий" Тогда
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВСуществующийПослеОткрытияЗавершение", ЭтотОбъект, ДополнительныеПараметры.Параметр);
	//	ОткрытьДокументДляПодбора(ДополнительныеПараметры.ИмяДокумента, ОписаниеОповещения);
	//КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийПослеОткрытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Если Результат = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Оповестить("ДополнитьТовары", ДополнительныеПараметры);
	//Корзина.Очистить();
	//УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОткрытыйДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Если Результат = КодВозвратаДиалога.Отмена Тогда
	//	Возврат;
	//ИначеЕсли Результат = "СоздатьНовый" Тогда
	//	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект);
	//	ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	//	ПараметрыФормы.КлючНазначенияИспользования = "НовыйДокументИзКорзины";
	//	ОткрытьФорму(
	//		ДополнительныеПараметры.ИмяФормыДокумента,
	//		ПараметрыФормы,
	//		,
	//		Новый УникальныйИдентификатор,
	//		,
	//		,
	//		ОписаниеОповещения);
	//ИначеЕсли Результат = "ДобавитьВОткрытый" Тогда
	//	Оповестить("ДополнитьТовары", ДополнительныеПараметры.Параметр);
	//КонецЕсли;
	//
	//Корзина.Очистить();
	//УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Элементы.СписокРасширенныйПоискНоменклатура.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	//Элементы = Форма.Элементы;
	//Элементы.ДекорацияПериод.Заголовок = 
	//	СтрШаблон("%1 - %2",
	//		Формат(Форма.НачалоПериода,"ДФ=dd.MM"),
	//		Формат(Форма.КонецПериода,"ДФ=dd.MM"));
	//
	//Если Форма.Корзина.Количество() = 0 Тогда
	//	Элементы.ГруппаСтраницыКартинки.ТекущаяСтраница = Элементы.ГруппаКорзинаПустая;
	//Иначе
	//	Элементы.ГруппаСтраницыКартинки.ТекущаяСтраница = Элементы.ГруппаКорзинаПолная;
	//КонецЕсли;
	//
	//Элементы.ЦеныДиапазон.Доступность = ЗначениеЗаполнено(Форма.ОтборВидЦен);
	//
	//Если Форма.ДоступныЦены Тогда
	//	Элементы.СписокРасширенныйПоискНоменклатураЦена.Видимость = ЗначениеЗаполнено(Форма.ОтборВидЦен);
	//	Элементы.СписокСтандартныйПоискНоменклатураЦена.Видимость = ЗначениеЗаполнено(Форма.ОтборВидЦен);
	//КонецЕсли;
	//
	//Элементы.ИнформацияПоСкладам.Видимость = Форма.ПоказыватьИнформациюПоСкладам;
	//Элементы.ИнформацияПоЦенам.Видимость = Форма.ПоказыватьИнформациюПоЦенам;
	//Элементы.СписокСтандартныйПоискНоменклатураСвободныйОстаток.Видимость = Форма.ПоказыватьСвободныеОстатки;
	//Элементы.СписокРасширенныйПоискНоменклатураВСвободныйОстаток.Видимость = Форма.ПоказыватьСвободныеОстатки;
	//Элементы.ИнформацияПоСкладамСвободныйОстаток.Видимость = Форма.ПоказыватьСвободныеОстатки;
	//
	//Элементы.СписокСтандартныйПоискНоменклатураРасход.Видимость = Форма.ПоказыватьИнформациюОРасходе;
	//Элементы.СписокРасширенныйПоискНоменклатураРасход.Видимость = Форма.ПоказыватьИнформациюОРасходе;
	//Элементы.ИнформацияПоСкладамРасходЗаПрошлыйПериод.Видимость = Форма.ПоказыватьИнформациюОРасходе;
	//Элементы.ДекорацияПериод.Видимость = Форма.ПоказыватьИнформациюОРасходе;
	//
	//Элементы.ПоказыватьНоменклатуруВПодчиненныхГруппах.Видимость = 
	//	(Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии"));
	//	
	//ОбновитьНадписьПодобраноТоваров(Форма);
	
КонецПроцедуры

//Обновляет итоги подобранных товаров в форме Корзина справочника Номенклатура
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьПодобраноТоваров(Форма)
	
	КоличествоТоваров = Форма.Корзина.Итог("КоличествоУпаковок");
	СуммаТоваров      = Форма.Корзина.Итог("Сумма");
	
	Если Форма.Корзина.Количество()=0 Тогда
		Форма.НадписьПодобраноТоваров = НСтр("ru = 'перетащите товары в корзину'");
	ИначеЕсли ЗначениеЗаполнено(Форма.ОтборВидЦен) Тогда
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подобрано: %1 на сумму %2'"),
			КоличествоТоваров,
			Формат(СуммаТоваров,"ЧДЦ=2; ЧН=0"));
	Иначе
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подобрано: %1'"),
			КоличествоТоваров
			);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеДокументов

&НаКлиенте
Процедура ОткрытьДокументДляПодбора(ИмяДокумента, ОписаниеОповещенияЗакрытия = Неопределено)
	
	ДополнительныеПараметры = Новый Структура("ОписаниеОповещенияЗакрытия", ОписаниеОповещенияЗакрытия);
	ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПараметров = Новый Структура("РежимВыбора", Истина);
	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаВыбора", ИмяДокумента);
	ОткрытьФорму(ИмяФормыДокумента, СтруктураПараметров, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяДокумента = ДополнительныеПараметры.ИмяДокумента;
	ДокументОткрытый = Результат;
	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента);
	ОткрытьФорму(ИмяФормыДокумента, Новый Структура("Ключ, КлючНазначенияИспользования", ДокументОткрытый, "Корзина"), ЭтотОбъект);
	
	Если ДополнительныеПараметры.ОписаниеОповещенияЗакрытия <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗакрытия, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

//&НаСервереБезКонтекста
//Функция ВсеСклады()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Склады.Ссылка
//	|ИЗ
//	|	Справочник.Склады КАК Склады
//	|ГДЕ
//	|	Склады.ПометкаУдаления = ЛОЖЬ";
//	РезультатЗапроса = Запрос.Выполнить();
//	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
//	
//КонецФункции

&НаСервере
Процедура УправлениеСписком()
	
	//Если ЗначениеЗаполнено(ОтборСклад) Тогда
	//	МассивСкладов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборСклад);
	//Иначе
	//	МассивСкладов = ВсеСклады.ВыгрузитьЗначения();
	//КонецЕсли;
	//Если СписокНоменклатура.Параметры.Элементы.Найти("ОтборСклад") <> Неопределено Тогда
	//	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ОтборСклад", МассивСкладов);
	//КонецЕсли;
	//Если СписокНоменклатура.Параметры.Элементы.Найти("ВидЦены") <> Неопределено Тогда
	//	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ВидЦены",    ОтборВидЦен);
	//КонецЕсли;
	//СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоДня(НачалоПериода));
	//СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецДня(КонецПериода));
	//СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ПоказыватьРасход", ПоказыватьИнформациюОРасходе);
	//УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(ЭтаФорма);
	//
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	//	СписокНоменклатура,
	//	"Цена",
	//	ЦенаОт,
	//	(ЦенаОт <> 0) И ЗначениеЗаполнено(ОтборВидЦен),
	//	ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	//
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	//	СписокНоменклатура,
	//	"Цена2",
	//	ЦенаДо,
	//	(ЦенаДо <> 0) И ЗначениеЗаполнено(ОтборВидЦен),
	//	ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	//	
	Элементы.СписокРасширенныйПоискНоменклатура.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(Форма)
	
	ИспользованиеОтбора = (Форма.ОтборОстатки <> 0);
	ИспользуемыйВидСравнения = ?(
		Форма.ОтборОстатки = 1,
		ВидСравненияКомпоновкиДанных.Больше,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Форма.СписокНоменклатура,
		"ВНаличии",
		0,
		ИспользованиеОтбора,
		ИспользуемыйВидСравнения);
	
КонецПроцедуры

#КонецОбласти

#Область ИнформацияПоСкладам

//&НаКлиенте
//Процедура ВывестиИнформациюПоСкладам()
//	
//	Если НЕ ПоказыватьИнформациюПоСкладам Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТекущиеДанные = ТекущиеДанныеСписка();
//	
//	Если ТекущиеДанные = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ЗаполнитьОстаткиПоСкладам(ТекущиеДанные.Ссылка);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьОстаткиПоСкладам(Номенклатура)
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	МассивСкладов = ВсеСклады.ВыгрузитьЗначения();
//	
//	Если ЗначениеЗаполнено(ОтборСклад) Тогда
//		Склад = ОтборСклад;
//	Иначе
//		Склад = МассивСкладов;
//	КонецЕсли;
//	Запрос.УстановитьПараметр("Склад",     Склад);
//	Запрос.УстановитьПараметр("ВсеСклады", МассивСкладов);
//	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(КонецПериода, -12));
//	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
//	Запрос.УстановитьПараметр("ПоказыватьИнформациюОРасходе", ПоказыватьИнформациюОРасходе);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ПРЕДСТАВЛЕНИЕ(ТоварыНаСкладахОстатки.Склад) КАК Склад,
//	|	ТоварыНаСкладахОстатки.Склад КАК СкладДляСоединения,
//	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличии,
//	|	ВЫБОР
//	|		КОГДА ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, ЛОЖЬ) = ЛОЖЬ
//	|			ТОГДА 0
//	|		ИНАЧЕ СвободныеОстаткиОстатки.ВНаличииОстаток - (СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток + СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток)
//	|	КОНЕЦ КАК СвободныйОстаток,
//	|	ЛОЖЬ КАК ЭтоИтог
//	|ПОМЕСТИТЬ ОстаткиПоСкладам
//	|ИЗ
//	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
//	|			,
//	|			Номенклатура = &Номенклатура
//	|				И Склад В ИЕРАРХИИ (&Склад)) КАК ТоварыНаСкладахОстатки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
//	|				,
//	|				Номенклатура = &Номенклатура
//	|					И Склад В ИЕРАРХИИ (&Склад)) КАК СвободныеОстаткиОстатки
//	|		ПО ТоварыНаСкладахОстатки.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
//	|			И ТоварыНаСкладахОстатки.Склад = СвободныеОстаткиОстатки.Склад
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	""Итого по всем складам"",
//	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
//	|	ТоварыНаСкладахОстатки.ВНаличииОстаток,
//	|	ВЫБОР
//	|		КОГДА ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, ЛОЖЬ) = ЛОЖЬ
//	|			ТОГДА 0
//	|		ИНАЧЕ СвободныеОстаткиОстатки.ВНаличииОстаток - (СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток + СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток)
//	|	КОНЕЦ,
//	|	ИСТИНА
//	|ИЗ
//	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
//	|			,
//	|			Склад В ИЕРАРХИИ (&ВсеСклады)
//	|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
//	|				,
//	|				Номенклатура = &Номенклатура
//	|					И Склад В ИЕРАРХИИ (&ВсеСклады)) КАК СвободныеОстаткиОстатки
//	|		ПО ТоварыНаСкладахОстатки.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
//	|ГДЕ
//	|	ТоварыНаСкладахОстатки.ВНаличииОстаток <> 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ПРЕДСТАВЛЕНИЕ(ГрафикПоступленияТоваровОстатки.Склад) КАК Склад,
//	|	ГрафикПоступленияТоваровОстатки.Склад КАК СкладДляСоединения,
//	|	ГрафикПоступленияТоваровОстатки.КоличествоИзЗаказовОстаток КАК Ожидается
//	|ПОМЕСТИТЬ ВТОжидается
//	|ИЗ
//	|	РегистрНакопления.ГрафикПоступленияТоваров.Остатки(
//	|			,
//	|			Номенклатура = &Номенклатура
//	|				И Склад В ИЕРАРХИИ (&Склад)) КАК ГрафикПоступленияТоваровОстатки
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	""Итого по всем складам"",
//	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
//	|	ГрафикПоступленияТоваровОстатки.КоличествоИзЗаказовОстаток
//	|ИЗ
//	|	РегистрНакопления.ГрафикПоступленияТоваров.Остатки(
//	|			,
//	|			Номенклатура = &Номенклатура
//	|				И Склад В ИЕРАРХИИ (&ВсеСклады)) КАК ГрафикПоступленияТоваровОстатки
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЕСТЬNULL(ОстаткиПоСкладам.Склад, ВТОжидается.Склад) КАК Склад,
//	|	ЕСТЬNULL(ОстаткиПоСкладам.ВНаличии, 0) КАК ВНаличии,
//	|	ЕСТЬNULL(ОстаткиПоСкладам.СвободныйОстаток, 0) КАК СвободныйОстаток,
//	|	ЕСТЬNULL(ОстаткиПоСкладам.ВНаличии, 0) - ЕСТЬNULL(ОстаткиПоСкладам.СвободныйОстаток, 0) КАК ВРезерве,
//	|	ОстаткиПоСкладам.ЭтоИтог КАК ЭтоИтог,
//	|	ЕСТЬNULL(ВТОжидается.Ожидается, 0) КАК Ожидается,
//	|	ЕСТЬNULL(ОстаткиПоСкладам.СкладДляСоединения, ВТОжидается.СкладДляСоединения) КАК СкладДляСоединения
//	|ПОМЕСТИТЬ ВТОстаткиОжидается
//	|ИЗ
//	|	ОстаткиПоСкладам КАК ОстаткиПоСкладам
//	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТОжидается КАК ВТОжидается
//	|		ПО ОстаткиПоСкладам.СкладДляСоединения = ВТОжидается.СкладДляСоединения
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ПРЕДСТАВЛЕНИЕ(ТоварыНаСкладахОбороты.Склад) КАК Склад,
//	|	ТоварыНаСкладахОбороты.Склад КАК СкладДляСоединения,
//	|	ТоварыНаСкладахОбороты.ВНаличииРасход КАК РасходЗаПрошлыйПериод,
//	|	ЛОЖЬ КАК ЭтоИтог
//	|ПОМЕСТИТЬ ВТРасход
//	|ИЗ
//	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
//	|			&НачалоПериода,
//	|			&КонецПериода,
//	|			,
//	|			&ПоказыватьИнформациюОРасходе
//	|				И Склад В ИЕРАРХИИ (&Склад)
//	|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОбороты
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	""Итого по всем складам"",
//	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
//	|	ТоварыНаСкладахОбороты.ВНаличииРасход,
//	|	ИСТИНА
//	|ИЗ
//	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
//	|			&НачалоПериода,
//	|			&КонецПериода,
//	|			,
//	|			&ПоказыватьИнформациюОРасходе
//	|				И Склад В ИЕРАРХИИ (&ВсеСклады)
//	|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОбороты
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЕСТЬNULL(ВТОстаткиОжидается.Склад, ВТРасход.Склад) КАК Склад,
//	|	ЕСТЬNULL(ВТОстаткиОжидается.ВНаличии, 0) КАК ВНаличии,
//	|	ЕСТЬNULL(ВТОстаткиОжидается.СвободныйОстаток, 0) КАК СвободныйОстаток,
//	|	ЕСТЬNULL(ВТОстаткиОжидается.ВРезерве, 0) КАК ВРезерве,
//	|	ЕСТЬNULL(ВТОстаткиОжидается.ЭтоИтог, ВТРасход.ЭтоИтог) КАК ЭтоИтог,
//	|	ЕСТЬNULL(ВТОстаткиОжидается.Ожидается, 0) КАК Ожидается,
//	|	ЕСТЬNULL(ВТОстаткиОжидается.СкладДляСоединения, ВТРасход.СкладДляСоединения) КАК СкладДляСоединения,
//	|	ЕСТЬNULL(ВТРасход.РасходЗаПрошлыйПериод, 0) КАК РасходЗаПрошлыйПериод
//	|ИЗ
//	|	ВТОстаткиОжидается КАК ВТОстаткиОжидается
//	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТРасход КАК ВТРасход
//	|		ПО ВТОстаткиОжидается.СкладДляСоединения = ВТРасход.СкладДляСоединения
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ЭтоИтог,
//	|	ВТОстаткиОжидается.СкладДляСоединения.Наименование
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТоварыВЯчейкахОстатки.Ячейка.Владелец КАК Склад,
//	|	ТоварыВЯчейкахОстатки.Ячейка.Помещение КАК Помещение,
//	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
//	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК Остаток
//	|ИЗ
//	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
//	|			,
//	|			Номенклатура = &Номенклатура
//	|				И Ячейка.Владелец В ИЕРАРХИИ (&Склад)
//	|				И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыВЯчейкахОстатки";
//	
//	
//	дИнформацияПоСкладам = РеквизитФормыВЗначение("ИнформацияПоСкладам");
//	дИнформацияПоСкладам.Строки.Очистить();
//	
//	Результат = Запрос.ВыполнитьПакет();
//	Если Не Результат [4].Пустой() Тогда
//		ОстаткиВЯчейках = Результат [5].Выгрузить(); 
//		Выборка = Результат [4].Выбрать();
//		Пока Выборка.Следующий() Цикл
//			Новая = дИнформацияПоСкладам.Строки.Добавить();
//			ЗаполнитьЗначенияСвойств(Новая, Выборка);
//			ПоискПоЯчейкам = ОстаткиВЯчейках.НайтиСтроки(Новый Структура("Склад", Выборка.СкладДляСоединения));
//			Если ПоискПоЯчейкам.Количество() > 0 Тогда
//				Помещения = Новый Массив;
//				Для каждого Строка Из ПоискПоЯчейкам Цикл
//					Если Помещения.Найти(Строка.Помещение) = Неопределено Тогда
//						Помещения.Добавить(Строка.Помещение);	
//					КонецЕсли; 	
//				КонецЦикла;
//				
//				Для каждого Помещение Из Помещения Цикл
//					СтрокаПомещения = Новая.Строки.Добавить();
//					ИтогПоПомещению = 0;
//					Для каждого Строка Из ПоискПоЯчейкам Цикл
//						Если Не Строка.Помещение = Помещение Тогда
//							Продолжить;	
//						КонецЕсли; 
//						ЗаполнитьЗначенияСвойств(СтрокаПомещения.Строки.Добавить(), Новый Структура("Склад, ВНаличии", Строка.Ячейка, Строка.Остаток));
//						ИтогПоПомещению = ИтогПоПомещению + Строка.Остаток;
//					КонецЦикла;
//					ЗаполнитьЗначенияСвойств(СтрокаПомещения, Новый Структура("Склад, ВНаличии", ?(ЗначениеЗаполнено(Помещение), Помещение, "<не указано>"),
//						ИтогПоПомещению));
//				КонецЦикла; 
//			КонецЕсли; 
//		КонецЦикла; 
//	КонецЕсли; 
//	
//	ЗначениеВРеквизитФормы(дИнформацияПоСкладам, "ИнформацияПоСкладам");
//	
//КонецПроцедуры

//&НаСервере
//Процедура СортироватьСкладыНаСервере();
//	
//	дИнформацияПоСкладам = РеквизитФормыВЗначение("ИнформацияПоСкладам");
//	дИнформацияПоСкладам.Строки.Сортировать("ЭтоИтог",, Новый СравнениеЗначений);
//	ЗначениеВРеквизитФормы(дИнформацияПоСкладам, "ИнформацияПоСкладам");
//	
//КонецПроцедуры

#КонецОбласти

#Область ИнформацияПоЦенам

//&НаКлиенте
//Процедура ВывестиИнформациюПоЦенам()
//	
//	Если НЕ ПоказыватьИнформациюПоЦенам Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТекущиеДанные = ТекущиеДанныеСписка();
//	
//	Если ТекущиеДанные = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Элементы.ИнформацияПоЦенамХарактеристика.Видимость = ТекущиеДанные.ИспользуютсяХарактеристики;
//	ЗаполнитьЦены(ТекущиеДанные.Ссылка, ТекущиеДанные.ИспользуютсяХарактеристики);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьЦены(Знач Номенклатура, Знач ИспользуютсяХарактеристики)
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ВидыЦен.Ссылка КАК Ссылка
//	|ПОМЕСТИТЬ ДоступныеВидыЦен
//	|ИЗ
//	|	Справочник.ВидыЦен КАК ВидыЦен
//	|ГДЕ
//	|	НЕ ВидыЦен.ПометкаУдаления
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
//	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
//	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
//	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
//	|ИЗ
//	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
//	|			,
//	|			Номенклатура = &Номенклатура
//	|				И Цена <> 0
//	|				И ВидЦены В
//	|					(ВЫБРАТЬ
//	|						ДоступныеВидыЦен.Ссылка КАК Ссылка
//	|					ИЗ
//	|						ДоступныеВидыЦен КАК ДоступныеВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Характеристика";
//	
//	ДеревоЦен = РеквизитФормыВЗначение("ИнформацияПоЦенам");
//	ДеревоЦен.Строки.Очистить();
//	
//	ОбщаяТаблицаЦен = Запрос.Выполнить().Выгрузить();
//	Если Не ИспользуютсяХарактеристики Тогда
//		Для Каждого СтрокаЦены Из ОбщаяТаблицаЦен Цикл
//			НоваяСтрока = ДеревоЦен.Строки.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЦены,,"Характеристика");
//		КонецЦикла;
//	Иначе
//		ВидыЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщаяТаблицаЦен.ВыгрузитьКолонку("ВидЦены"));
//		
//		Для Каждого ВидЦены Из ВидыЦен Цикл
//			НоваяСтрока = ДеревоЦен.Строки.Добавить();
//			НоваяСтрока.ВидЦены = ВидЦены;
//			ТаблицаЦеныПоХарактеристикам = ОбщаяТаблицаЦен.Скопировать(Новый Структура("ВидЦены", ВидЦены));
//			МинимальнаяЦена = Неопределено;
//			Для Каждого СтрокаЦены Из ТаблицаЦеныПоХарактеристикам Цикл
//				ДетальнаяСтрока = НоваяСтрока.Строки.Добавить();
//				ЗаполнитьЗначенияСвойств(ДетальнаяСтрока, СтрокаЦены);
//				Если МинимальнаяЦена = Неопределено Тогда
//					МинимальнаяЦена = СтрокаЦены.Цена;
//				Иначе
//					МинимальнаяЦена = Мин(МинимальнаяЦена, СтрокаЦены.Цена);
//				КонецЕсли;
//			КонецЦикла;
//			// Выведем минимальную цену, для того, чтобы заполнить хоть как-то.
//			НоваяСтрока.Цена = МинимальнаяЦена;
//			НоваяСтрока.Валюта = СтрокаЦены.Валюта;
//		КонецЦикла;
//	КонецЕсли;
//	ЗначениеВРеквизитФормы(ДеревоЦен, "ИнформацияПоЦенам");
//	
//КонецПроцедуры

#КонецОбласти

#Область КартинкаНоменклатуры

&НаКлиенте
Процедура Подключаемый_ВывестиКартинкуНоменклатуры()
	
	ТекущиеДанные = ТекущиеДанныеСписка();
	
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.КартинкаНоменклатуры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	АдресКартинки = КартинкаНоменклатурыНаСервере(ТекущиеДанные.Ссылка, ФайлКартинки);
	Элементы.КартинкаНоменклатуры.Видимость = НЕ ПустаяСтрока(АдресКартинки);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КартинкаНоменклатурыНаСервере(Знач Номенклатура, ФайлКартинки)
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ФайлКартинки");
	Если ФайлКартинки.Пустая() Тогда
		Возврат "";
	ИначеЕсли ФайлКартинки.ПометкаУдаления Тогда
		Возврат "";
	Иначе
		Возврат НавигационнаяСсылкаКартинки(ФайлКартинки, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(Знач ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура Номенклатура_КартинкаНоменклатурыНажатиеПосле(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ФайлКартинки,
				УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстовоеОписание

&НаКлиенте
Процедура Подключаемый_ВывестиТекстовоеОписание()
	
	ТекущиеДанные = ТекущиеДанныеСписка();
	
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.ТекстовоеОписаниеНоменклатуры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстовоеОписаниеНоменклатуры = ТекстовоеОписаниеНоменклатурыНаСервере(ТекущиеДанные.Ссылка);
	Элементы.ТекстовоеОписаниеНоменклатуры.Видимость = НЕ ПустаяСтрока(ТекстовоеОписаниеНоменклатуры);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстовоеОписаниеНоменклатурыНаСервере(Знач Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Описание");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Номенклатура_ПередЗакрытиемПосле(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьКорзинуВХранилищеНастроек();
	
КонецПроцедуры

#Область СохранениеКорзиныПриЗакрытии

&НаСервере
Процедура ВосстановитьКорзину()
	
	Корзина.Загрузить(
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			КлючОбъектаНоменклатураРасширенный(),
			КлючНастроекКорзина(),
			Новый ТаблицаЗначений));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКорзинуВХранилищеНастроек()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаНоменклатураРасширенный(),
		КлючНастроекКорзина(),
		Корзина.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция КлючОбъектаНоменклатураРасширенный()

	Возврат "НоменклатураРасширенный";

КонецФункции

&НаСервере
Функция КлючНастроекКорзина()

	Возврат "СохранениеКорзины";

КонецФункции

#КонецОбласти

#КонецОбласти