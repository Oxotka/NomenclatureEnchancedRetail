
&НаСервере
Процедура Номенклатура_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	ВсеСклады.ЗагрузитьЗначения(ВсеСклады());
	ДоступныЦены = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	УправлениеФормой(ЭтотОбъект);
	УправлениеСписком();
	УправлениеУсловнымОформлением();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеУсловнымОформлением()
	
	// Установим условное оформление
	
	// 1. Итоги по складам
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнформацияПоСкладам.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнформацияПоСкладам.ЭтоИтог");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240, 240, 240));
	
КонецПроцедуры


&НаКлиенте
Процедура Номенклатура_СписокПриАктивизацииСтрокиПосле(Элемент)
	
	ПодключитьОбработчикОжидания("ВывестиИнформациюПоСкладам", 0.1, Истина);
	ПодключитьОбработчикОжидания("ВывестиИнформациюПоЦенам", 0.1, Истина);

	ПодключитьОбработчикОжидания("Подключаемый_ВывестиКартинкуНоменклатуры", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ВывестиТекстовоеОписание", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ОтборОстаткиПриИзменении(Элемент)
	
	УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(ЭтаФорма);
	ВывестиИнформациюПоСкладам();
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ОтборСкладПриИзменении(Элемент)
	
	Оповестить("Номенклатура_Склад_Изменение");
	УправлениеСписком();
	ВывестиИнформациюПоСкладам();
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ОтборВидЦенПриИзменении(Элемент)
	
	Оповестить("Номенклатура_ВидЦен_Изменение");
	УправлениеФормой(ЭтотОбъект);
	УправлениеСписком();
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ОтборВидЦенОчистка(Элемент, СтандартнаяОбработка)
	
	Оповестить("Номенклатура_ВидЦен_Изменение");
	УправлениеФормой(ЭтотОбъект);
	УправлениеСписком();
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ЦеныОтПриИзменении(Элемент)
	
	УправлениеСписком();
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ЦеныДоПриИзменении(Элемент)
	
	УправлениеСписком();
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ПоказыватьСвободныеОстаткиПриИзмененииПеред(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ПоказыватьСкладыПриИзмененииПеред(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ПоказыватьИнформациюПоЦенамПриИзмененииПосле(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ИнформацияПоСкладамПриИзменении(Элемент)
	
	СортироватьСкладыНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура Номенклатура_ДекорацияКорзинаНажатие(Элемент)
	
	ОткрытьКорзину();
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ДекорацияКорзинаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_ДекорацияКорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьВКорзину(ПараметрыПеретаскивания.Значение);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура_НадписьПодобраноТоваровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКорзину();
	
КонецПроцедуры


#Область СлужебныеПроцедурыИФункции

// Возвращает текущие данные динамического списка.
//
// Параметры:
//  Список  - <ДинамическийСписок> - динамический список.
//
// Возвращаемое значение:
//   <ДанныеФормыСтруктура>   - текущие данные списка.
//          Если в списке нет активной строки или активной является строка группировки - возвращается Неопределено.
//
&НаКлиенте
Функция ТекущиеДанныеДинамическогоСписка(Список)
	
	Если Список.ТекущиеДанные = Неопределено Тогда // Нет текущей строки.
		Возврат Неопределено;
	ИначеЕсли Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") 
		И Список.ТекущиеДанные.ГруппировкаСтроки <> Неопределено Тогда // Это строка группировки.
		Возврат Неопределено;
	Иначе
		Возврат Список.ТекущиеДанные;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВидыНоменклатурыПриАктивизацииПосле()
	
	УправлениеСписком();
	
КонецПроцедуры


#Область Корзина

&НаКлиенте
Процедура ОткрытьКорзину()
	
	Если Корзина.Количество() > 0 Тогда
		ПараметрыКорзины = ЗаписатьПодборВХранилище();
		ОткрытьКорзинуПродолжить(ПараметрыКорзины);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорзинуПродолжить(ПараметрыКорзины)
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("АдресКорзиныВХранилище", 
		?(ЗначениеЗаполнено(ПараметрыКорзины), ПараметрыКорзины.АдресКорзиныВХранилище, Неопределено));
	ПередаваемыеПараметры.Вставить("ОтборВидЦен", ОтборВидЦен);
	ПередаваемыеПараметры.Вставить("ОтборСклад", ОтборСклад);
	ПередаваемыеПараметры.Вставить("ПоказыватьСвободныеОстатки", ПоказыватьСвободныеОстатки);
	ПередаваемыеПараметры.Вставить("ДокументОткрытый", ДокументОткрытый);
	
	ПередаваемыеПараметры.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	ОповещениеКорзинаЗакрытие = Новый ОписаниеОповещения("КорзинаЗакрытие",ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаКорзина",
		ПередаваемыеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОповещениеКорзинаЗакрытие,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗакрытие(ПараметрЗакрытия, Параметры) Экспорт

	Корзина.Очистить();
	
	Если ПараметрЗакрытия = Неопределено Тогда
		//Закрытие без сохранения
	ИначеЕсли ПараметрЗакрытия="ПеренестиВДокумент" Тогда
		//Закрытие без сохранения
	Иначе 
		//Закрытие с сохранением
		Для каждого СтрокаКорзины Из ПараметрЗакрытия.Корзина Цикл
			НоваяСтрокаКорзины = Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКорзины, СтрокаКорзины);
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(ВыбранныеСтроки, ЗапрашиватьКоличество = Ложь) Экспорт
	
	Если ТипЗнч(ВыбранныеСтроки) = Тип("Массив") Тогда
		Для Каждого ВыделеннаяСтрока Из ВыбранныеСтроки Цикл
			ДобавитьСтрокуВКорзину(ВыделеннаяСтрока, ЗапрашиватьКоличество);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = Тип("СправочникСсылка.Номенклатура") ИЛИ 
		ТипЗнч(ВыбранныеСтроки) = Тип("ДанныеФормыСтруктура") Тогда
		
		ДобавитьСтрокуВКорзину(ВыбранныеСтроки, ЗапрашиватьКоличество);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеСтрокиАналогов(Строка)
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Ссылка", Строка.Аналог);
	ДанныеСтроки.Вставить("Цена", Строка.Цена);
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиСписка(ВыделеннаяСтрока)
	
	Если ТипЗнч(ВыделеннаяСтрока) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
	ИначеЕсли ВыделеннаяСтрока.Свойство("Аналог") Тогда
		ДанныеСтроки = ДанныеСтрокиАналогов(ВыделеннаяСтрока);
	Иначе
		ДанныеСтроки = Неопределено;
	КонецЕсли;
	
	Возврат ДанныеСтроки;

КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуВКорзину(ВыделеннаяСтрока, ЗапрашиватьКоличество)
	
	Если ТипЗнч(ВыделеннаяСтрока) = Тип("ДанныеФормыСтруктура") Тогда
		ДанныеСтроки = ВыделеннаяСтрока;
	Иначе
		ДанныеСтроки = ДанныеСтрокиСписка(ВыделеннаяСтрока);
	КонецЕсли;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = СтруктураВыбора();
	ЗаполнитьЗначенияСвойств(СтруктураВыбора, ДанныеСтроки);
	СтруктураВыбора.Номенклатура            = ДанныеСтроки.Ссылка;
	СтруктураВыбора.Количество              = 1;
	СтруктураВыбора.ЗапрашиватьКоличество   = ЗапрашиватьКоличество;
	СтруктураВыбора.ВызватьУправлениеФормой = ЗапрашиватьКоличество;
	
	Если СтруктураВыбора.ИспользуютсяХарактеристики Тогда
		ДополнитьСтруктуруВыбораХарактеристикой(СтруктураВыбора);
	Иначе
		ДобавитьНоменклатуруВКорзинуЗапроситьКоличество(СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВКорзинуЗавершение(Результат, СтруктураВыбора) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора.Количество = Результат.Количество;
	
	СтруктураПоискаВКорзине = Новый Структура;
	СтруктураПоискаВКорзине.Вставить("Номенклатура",               СтруктураВыбора.Номенклатура);
	СтруктураПоискаВКорзине.Вставить("ИспользуютсяХарактеристики", СтруктураВыбора.ИспользуютсяХарактеристики);
	Если СтруктураВыбора.ИспользуютсяХарактеристики Тогда
		СтруктураПоискаВКорзине.Вставить("Характеристика", СтруктураВыбора.Характеристика);
	КонецЕсли;
	
	НайденныеСтроки = Корзина.НайтиСтроки(СтруктураПоискаВКорзине);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаКорзины = Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорзины, СтруктураВыбора);
	Иначе
		СтрокаКорзины                    = НайденныеСтроки[0];
		СтрокаКорзины.Количество         = СтрокаКорзины.Количество + СтруктураВыбора.Количество;
		//Если цена изменилась - перезаполняем новым значением
		СтрокаКорзины.Цена               = СтруктураВыбора.Цена;
	КонецЕсли;
	
	СтрокаКорзины.Цена = СтруктураВыбора.Цена;
	СтрокаКорзины.Сумма = СтруктураВыбора.Цена * СтрокаКорзины.Количество;
	ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор товаров'")
		,
		,
		НСтр("ru = 'Товар "+СтруктураВыбора.Номенклатура+" добавлен в корзину'"));
		
	Если СтруктураВыбора.ВызватьУправлениеФормой Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтруктуруВыбораХарактеристикой(СтруктураВыбора)

	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнитьСтруктуруВыбораХарактеристикойЗавершение", ЭтотОбъект, СтруктураВыбора);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", СтруктураВыбора.Номенклатура);
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		МассивСкладов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборСклад);
	Иначе
		МассивСкладов = ВсеСклады;
	КонецЕсли;
	СтруктураПараметров.Вставить("ОтборСклад", МассивСкладов);
	СтруктураПараметров.Вставить("ВидЦены", ОтборВидЦен);
	СтруктураПараметров.Вставить("ПоказыватьСвободныеОстатки", ПоказыватьСвободныеОстатки);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораХарактеристики", 
		СтруктураПараметров, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтруктуруВыбораХарактеристикойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры.Характеристика = Результат;
	ДополнительныеПараметры.ВызватьУправлениеФормой = Истина;
	ДополнительныеПараметры.Цена = ЦенаНоменклатуры(
		ДополнительныеПараметры.Номенклатура,
		Результат, ОтборВидЦен);
		
	ДобавитьНоменклатуруВКорзинуЗапроситьКоличество(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦенаНоменклатуры(Номенклатура, Характеристика, ВидЦены)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНоменклатуруВКорзинуЗапроситьКоличество(СтруктураВыбора)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСтрокуВКорзинуЗавершение", ЭтотОбъект, СтруктураВыбора);
	
	Если СтруктураВыбора.ЗапрашиватьКоличество Тогда
		ОткрытьФорму(
			"ОбщаяФорма.ФормаКоличествоУпаковок", 
			СтруктураВыбора,
			ЭтотОбъект,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураВыбора()
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("Номенклатура");
	СтруктураВыбора.Вставить("Цена", 0);
	СтруктураВыбора.Вставить("Количество", 0);
	СтруктураВыбора.Вставить("ИспользуютсяХарактеристики", Ложь);
	СтруктураВыбора.Вставить("Характеристика");
	СтруктураВыбора.Вставить("ЗапрашиватьКоличество", Ложь);
	СтруктураВыбора.Вставить("ВызватьУправлениеФормой", Ложь);
	
	Возврат СтруктураВыбора;
	
КонецФункции

&НаСервере
// Функция помещает результаты подбора в хранилище
//
// Возвращает структуру:
//	Структура
//		- Адрес в хранилище, куда помещена выбранная номенклатура (корзина);
//		- Уникальный идентификатор формы владельца, необходим для идентификации при обработке результатов подбора;
//
Функция ЗаписатьПодборВХранилище() 
	
	ПодобранныеТовары = Корзина.Выгрузить();
	АдресКорзиныВХранилище = ПоместитьВоВременноеХранилище(ПодобранныеТовары, УникальныйИдентификатор);
	Возврат Новый Структура("АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца", АдресКорзиныВХранилище, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Функция ПараметрыСозданияДокумента()

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидЦен", ОтборВидЦен);
	Если ЗначениеЗаполнено(ОтборСклад) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборСклад, "ЭтоГруппа") Тогда
		ДанныеЗаполнения.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Корзина");
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("ПараметрыКорзины", ЗаписатьПодборВХранилище());
	//ПараметрыФормы.Вставить("ВидЦен", ОтборВидЦен);
	Если ЗначениеЗаполнено(ОтборСклад) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборСклад, "ЭтоГруппа") Тогда
		ПараметрыФормы.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция НазваниеДокумента(ИмяДокумента)
	
	СоответствиеИменДокументов = Новый Структура;
	СоответствиеИменДокументов.Вставить("ЧекККМ", НСтр("ru='Чек ККМ'"));
	СоответствиеИменДокументов.Вставить("ЗаказКлиента", НСтр("ru='Заказ клиента'"));
	СоответствиеИменДокументов.Вставить("ЗаказПоставщику", НСтр("ru='Заказ поставщику'"));
	СоответствиеИменДокументов.Вставить("РеализацияТоваровУслуг", НСтр("ru='Реализация товаров и услуг'"));
	СоответствиеИменДокументов.Вставить("ПриобретениеТоваровУслуг", НСтр("ru='Приобретение товаров и услуг'"));
	СоответствиеИменДокументов.Вставить("ПеремещениеТоваров", НСтр("ru='Перемещение товаров'"));
	СоответствиеИменДокументов.Вставить("ЗаказНаПеремещение", НСтр("ru='Заказ на перемещение'"));
	
	Если СоответствиеИменДокументов.Свойство(ИмяДокумента) Тогда
		Возврат СоответствиеИменДокументов[ИмяДокумента];
	Иначе
		Возврат ИмяДокумента;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента)
	
	//Если ИмяДокумента = "ЧекККМ" Тогда
	//	ИмяФормыДокумента = "Документ.ЧекККМ.Форма.ФормаДокументаРМК";
	//Иначе
	//	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента);
	//КонецЕсли;
	//
	//ПараметрыФормы = ПараметрыСозданияДокумента();
	//
	//ОткрытаяФорма = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	//ЕстьОткрытыйДокумент = ЗначениеЗаполнено(ДокументОткрытый) И ТипЗнч(ДокументОткрытый) = Тип("ДокументСсылка."+ИмяДокумента);
	//Если ОткрытаяФорма.Открыта() ИЛИ ЕстьОткрытыйДокумент Тогда
	//	ДополнительныеПараметры = Новый Структура;
	//	// Для открытой формы передаем форму и параметр оповещения.
	//	ДополнительныеПараметры.Вставить("Форма", ОткрытаяФорма);
	//	ДополнительныеПараметры.Вставить("Параметр", 
	//		Новый Структура("ИмяДокумента, АдресКорзиныВХранилище", ИмяДокумента, ПараметрыФормы.ПараметрыКорзины.АдресКорзиныВХранилище));
	//	// Для новой формы передаем имя формы и параметры.
	//	ДополнительныеПараметры.Вставить("ИмяФормыДокумента", ИмяФормыДокумента);
	//	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	//	
	//	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ЕстьОткрытыйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//	ТекстВопроса = 
	//		СтрШаблон(НСтр("ru='Есть открытый ""%1"", оформленный из корзины.
	//		|Что сделать с набранным товаром?'"),
	//		НазваниеДокумента(ИмяДокумента));
	//	КнопкиВопроса = Новый СписокЗначений;
	//	КнопкиВопроса.Добавить("ДобавитьВОткрытый", НСтр("ru='Добавить в открытый'"));
	//	КнопкиВопроса.Добавить("СоздатьНовый", НСтр("ru='Создать новый'"));
	//	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, КнопкиВопроса);
	//Иначе
	//	
	//	ДополнительныеПараметры = Новый Структура;
	//	// Для открытой формы передаем форму и параметр оповещения.
	//	ДополнительныеПараметры.Вставить("Форма", ОткрытаяФорма);
	//	ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
	//	ДополнительныеПараметры.Вставить("Параметр", 
	//		Новый Структура("ИмяДокумента, АдресКорзиныВХранилище", ИмяДокумента, ПараметрыФормы.ПараметрыКорзины.АдресКорзиныВХранилище));
	//	// Для новой формы передаем имя формы и параметры.
	//	ДополнительныеПараметры.Вставить("ИмяФормыДокумента", ИмяФормыДокумента);
	//	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	//	
	//	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ДобавитьВСуществующийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//	ТекстВопроса = НСтр("ru='Что сделать с набранным товаром?'");
	//	КнопкиВопроса = Новый СписокЗначений;
	//	КнопкиВопроса.Добавить("ДобавитьВСуществующий", НСтр("ru='Добавить в существующий'"));
	//	КнопкиВопроса.Добавить("СоздатьНовый", НСтр("ru='Создать новый'"));
	//	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, КнопкиВопроса);
	//	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = "СоздатьНовый" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект);
		ДополнительныеПараметры.Форма.Открыть();
		Корзина.Очистить();
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли Результат = "ДобавитьВСуществующий" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВСуществующийПослеОткрытияЗавершение", ЭтотОбъект, ДополнительныеПараметры.Параметр);
		ОткрытьДокументДляПодбора(ДополнительныеПараметры.ИмяДокумента, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийПослеОткрытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ДополнитьТовары", ДополнительныеПараметры);
	Корзина.Очистить();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОткрытыйДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = "СоздатьНовый" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект);
		ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
		ПараметрыФормы.КлючНазначенияИспользования = "НовыйДокументИзКорзины";
		ОткрытьФорму(
			ДополнительныеПараметры.ИмяФормыДокумента,
			ПараметрыФормы,
			,
			Новый УникальныйИдентификатор,
			,
			,
			ОписаниеОповещения);
	ИначеЕсли Результат = "ДобавитьВОткрытый" Тогда
		Оповестить("ДополнитьТовары", ДополнительныеПараметры.Параметр);
	КонецЕсли;
	
	Корзина.Очистить();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.Корзина.Количество() = 0 Тогда
		Элементы.ГруппаСтраницыКартинки.ТекущаяСтраница = Элементы.ГруппаКорзинаПустая;
	Иначе
		Элементы.ГруппаСтраницыКартинки.ТекущаяСтраница = Элементы.ГруппаКорзинаПолная;
	КонецЕсли;
	
	Элементы.ЦеныДиапазон.Доступность = ЗначениеЗаполнено(Форма.ОтборВидЦен);
	
	Если Форма.ДоступныЦены Тогда
		Элементы.Цена.Видимость = ЗначениеЗаполнено(Форма.ОтборВидЦен);
	КонецЕсли;
	Элементы.СвободныйОстаток.Видимость = Форма.ПоказыватьСвободныеОстатки;
	Элементы.ИнформацияПоСкладам.Видимость = Форма.ПоказыватьИнформациюПоСкладам;
	Элементы.ИнформацияПоСкладамСвободныйОстаток.Видимость = Форма.ПоказыватьСвободныеОстатки;
	Элементы.ИнформацияПоСкладамВРезерве.Видимость = Форма.ПоказыватьСвободныеОстатки;
	Элементы.ИнформацияПоЦенам.Видимость = Форма.ПоказыватьИнформациюПоЦенам;
	
	ОбновитьНадписьПодобраноТоваров(Форма);
	
КонецПроцедуры

//Обновляет итоги подобранных товаров в форме Корзина справочника Номенклатура
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьПодобраноТоваров(Форма)
	
	КоличествоТоваров = Форма.Корзина.Итог("Количество");
	СуммаТоваров      = Форма.Корзина.Итог("Сумма");
	
	Если Форма.Корзина.Количество()=0 Тогда
		Форма.НадписьПодобраноТоваров = НСтр("ru = 'перетащите товары в корзину'");
	ИначеЕсли ЗначениеЗаполнено(Форма.ОтборВидЦен) Тогда
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подобрано: %1 на сумму %2'"),
			КоличествоТоваров,
			Формат(СуммаТоваров,"ЧДЦ=2; ЧН=0"));
	Иначе
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подобрано: %1'"),
			КоличествоТоваров
			);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеДокументов

&НаКлиенте
Процедура ОткрытьДокументДляПодбора(ИмяДокумента, ОписаниеОповещенияЗакрытия = Неопределено)
	
	ДополнительныеПараметры = Новый Структура("ОписаниеОповещенияЗакрытия", ОписаниеОповещенияЗакрытия);
	ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПараметров = Новый Структура("РежимВыбора", Истина);
	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаВыбора", ИмяДокумента);
	ОткрытьФорму(ИмяФормыДокумента, СтруктураПараметров, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяДокумента = ДополнительныеПараметры.ИмяДокумента;
	ДокументОткрытый = Результат;
	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента);
	ОткрытьФорму(ИмяФормыДокумента, Новый Структура("Ключ, КлючНазначенияИспользования", ДокументОткрытый, "Корзина"), ЭтотОбъект);
	
	Если ДополнительныеПараметры.ОписаниеОповещенияЗакрытия <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗакрытия, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервереБезКонтекста
Функция ВсеСклады()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	не Склады.ПометкаУдаления и не Склады.ЭтоГруппа";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура УправлениеСписком()
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		МассивСкладов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборСклад);
	Иначе
		МассивСкладов = ВсеСклады.ВыгрузитьЗначения();
	КонецЕсли;
	Если Список.Параметры.Элементы.Найти("ОтборСклад") <> Неопределено Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОтборСклад", МассивСкладов);
	КонецЕсли;
	Если Список.Параметры.Элементы.Найти("ВидЦены") <> Неопределено Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ВидЦены", ОтборВидЦен);
	КонецЕсли;
	УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(ЭтотОбъект);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список,
		"Цена",
		ЦенаОт,
		(ЦенаОт <> 0) И ЗначениеЗаполнено(ОтборВидЦен),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список,
		"Цена2",
		ЦенаДо,
		(ЦенаДо <> 0) И ЗначениеЗаполнено(ОтборВидЦен),
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(Форма)
	
	ИспользованиеОтбора = (Форма.ОтборОстатки <> 0);
	ИспользуемыйВидСравнения = ?(
		Форма.ОтборОстатки = 1,
		ВидСравненияКомпоновкиДанных.Больше,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Форма.Список,
		"ВНаличии",
		0,
		ИспользованиеОтбора,
		ИспользуемыйВидСравнения);
	
КонецПроцедуры

#КонецОбласти

#Область ИнформацияПоСкладам

&НаКлиенте
Процедура ВывестиИнформациюПоСкладам()
	
	Если НЕ ПоказыватьИнформациюПоСкладам Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстаткиПоСкладам(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиПоСкладам(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	МассивСкладов = ВсеСклады.ВыгрузитьЗначения();
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		Склад = ОтборСклад;
	Иначе
		Склад = МассивСкладов;
	КонецЕсли;
	Запрос.УстановитьПараметр("Склад",     Склад);
	Запрос.УстановитьПараметр("ВсеСклады", МассивСкладов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ТоварыНаСкладахОстатки.Склад) КАК Склад,
	|	ТоварыНаСкладахОстатки.Склад КАК СкладДляСоединения,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК ВНаличии,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК СвободныйОстаток,
	|	ТоварыНаСкладахОстатки.РезервОстаток КАК Резерв,
	|	ЛОЖЬ КАК ЭтоИтог
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Склад В ИЕРАРХИИ (&Склад)) КАК ТоварыНаСкладахОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Итого по всем складам"",
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|	ТоварыНаСкладахОстатки.КоличествоОстаток,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток,
	|	ТоварыНаСкладахОстатки.РезервОстаток КАК Резерв,
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад В ИЕРАРХИИ (&ВсеСклады)
	|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток <> 0";
	
	Результат = Запрос.Выполнить();
	ИнформацияПоСкладам.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСкладыНаСервере();
	
	ИнформацияПоСкладам.Сортировать("ЭтоИтог",, Новый СравнениеЗначений);
	
КонецПроцедуры

#КонецОбласти

#Область ИнформацияПоЦенам

&НаКлиенте
Процедура ВывестиИнформациюПоЦенам()
	
	Если НЕ ПоказыватьИнформациюПоЦенам Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ИнформацияПоЦенамХарактеристика.Видимость = ТекущиеДанные.ИспользуютсяХарактеристики;
	ЗаполнитьЦены(ТекущиеДанные.Ссылка, ТекущиеДанные.ИспользуютсяХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦены(Знач Номенклатура, Знач ИспользуютсяХарактеристики)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДоступныеВидыЦен
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ ВидыЦен.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Цена <> 0
	|				И ВидЦены В
	|					(ВЫБРАТЬ
	|						ДоступныеВидыЦен.Ссылка КАК Ссылка
	|					ИЗ
	|						ДоступныеВидыЦен КАК ДоступныеВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Характеристика";
	
	ДеревоЦен = РеквизитФормыВЗначение("ИнформацияПоЦенам");
	ДеревоЦен.Строки.Очистить();
	
	ОбщаяТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Если Не ИспользуютсяХарактеристики Тогда
		Для Каждого СтрокаЦены Из ОбщаяТаблицаЦен Цикл
			НоваяСтрока = ДеревоЦен.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЦены,,"Характеристика");
		КонецЦикла;
	Иначе
		ВидыЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщаяТаблицаЦен.ВыгрузитьКолонку("ВидЦены"));
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			НоваяСтрока = ДеревоЦен.Строки.Добавить();
			НоваяСтрока.ВидЦены = ВидЦены;
			ТаблицаЦеныПоХарактеристикам = ОбщаяТаблицаЦен.Скопировать(Новый Структура("ВидЦены", ВидЦены));
			МинимальнаяЦена = Неопределено;
			Для Каждого СтрокаЦены Из ТаблицаЦеныПоХарактеристикам Цикл
				ДетальнаяСтрока = НоваяСтрока.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(ДетальнаяСтрока, СтрокаЦены);
				Если МинимальнаяЦена = Неопределено Тогда
					МинимальнаяЦена = СтрокаЦены.Цена;
				Иначе
					МинимальнаяЦена = Мин(МинимальнаяЦена, СтрокаЦены.Цена);
				КонецЕсли;
			КонецЦикла;
			// Выведем минимальную цену, для того, чтобы заполнить хоть как-то.
			НоваяСтрока.Цена = МинимальнаяЦена;
			НоваяСтрока.Валюта = СтрокаЦены.Валюта;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоЦен, "ИнформацияПоЦенам");
	
КонецПроцедуры

#КонецОбласти

#Область КартинкаНоменклатуры

&НаКлиенте
Процедура Подключаемый_ВывестиКартинкуНоменклатуры()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Тогда 
		Элементы.КартинкаНоменклатуры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	АдресКартинки = КартинкаНоменклатурыНаСервере(ТекущиеДанные.Ссылка, ФайлКартинки);
	Элементы.КартинкаНоменклатуры.Видимость = НЕ ПустаяСтрока(АдресКартинки);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КартинкаНоменклатурыНаСервере(Знач Номенклатура, ФайлКартинки)
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ФайлКартинки");
	Если ФайлКартинки.Пустая() Тогда
		Возврат "";
	ИначеЕсли ФайлКартинки.ПометкаУдаления Тогда
		Возврат "";
	Иначе
		Возврат НавигационнаяСсылкаКартинки(ФайлКартинки, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(Знач ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура Номенклатура_КартинкаНоменклатурыНажатиеПосле(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ФайлКартинки,
				УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстовоеОписание

&НаКлиенте
Процедура Подключаемый_ВывестиТекстовоеОписание()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Тогда 
		Элементы.ТекстовоеОписаниеНоменклатуры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстовоеОписаниеНоменклатуры = ТекстовоеОписаниеНоменклатурыНаСервере(ТекущиеДанные.Ссылка);
	Элементы.ТекстовоеОписаниеНоменклатуры.Видимость = НЕ ПустаяСтрока(ТекстовоеОписаниеНоменклатуры);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстовоеОписаниеНоменклатурыНаСервере(Знач Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Описание");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Номенклатура_ПередЗакрытиемПосле(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьКорзинуВХранилищеНастроек();
	
КонецПроцедуры

#Область СохранениеКорзиныПриЗакрытии

&НаСервере
Процедура ВосстановитьКорзину()
	
	Корзина.Загрузить(
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			КлючОбъектаНоменклатураРасширенный(),
			КлючНастроекКорзина(),
			Новый ТаблицаЗначений));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКорзинуВХранилищеНастроек()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаНоменклатураРасширенный(),
		КлючНастроекКорзина(),
		Корзина.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция КлючОбъектаНоменклатураРасширенный()

	Возврат "НоменклатураРасширенный";

КонецФункции

&НаСервере
Функция КлючНастроекКорзина()

	Возврат "СохранениеКорзины";

КонецФункции

#КонецОбласти

#КонецОбласти