#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресКорзиныВХранилище") И ЗначениеЗаполнено(Параметры.АдресКорзиныВХранилище) Тогда
		ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(Параметры.АдресКорзиныВХранилище);
		Корзина.Загрузить(ТаблицаДляЗагрузки);
	КонецЕсли;
	Если Параметры.Свойство("ПоказыватьЦены") Тогда
		ПоказыватьЦены = Параметры.ПоказыватьЦены;
	КонецЕсли;
	Если Параметры.Свойство("ОтборВидЦен") Тогда
		ОтборВидЦен = Параметры.ОтборВидЦен;
	КонецЕсли;
	Если Параметры.Свойство("ОтборСклад") Тогда
		ОтборСклад = Параметры.ОтборСклад;
	КонецЕсли;
	Если Параметры.Свойство("ПоказыватьСвободныеОстатки") Тогда
		ПоказыватьСвободныеОстатки = Параметры.ПоказыватьСвободныеОстатки;
	КонецЕсли;
	Если Параметры.Свойство("ДокументОткрытый") Тогда
		ДокументОткрытый = Параметры.ДокументОткрытый;
	КонецЕсли;

	//Элементы.СоздатьЗаказКлиента.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказКлиента);
	//Элементы.СоздатьЗаказПоставщику.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПоставщику);
	//Элементы.СоздатьПоступлениеТоваровУслуг.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.ПриобретениеТоваровУслуг);
	//Элементы.СоздатьРеализацияТоваровУслуг.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.РеализацияТоваровУслуг);
	//Элементы.СоздатьПеремещениеТоваров.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.ПеремещениеТоваров);
	//Элементы.СоздатьЧекККМ.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМ);
	//Элементы.СоздатьЗаказНаПеремещение.Видимость = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПеремещение);
	//
	ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ РазрешитьЗакрытие Тогда
		Отказ=Истина;
		ПодключитьОбработчикОжидания("ЗакрытьФормуПеренестиКорзину", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПеренестиКорзину() Экспорт
	
	РазрешитьЗакрытие = Истина;
	Если ПеренестиВДокумент Тогда
		Закрыть("ПеренестиВДокумент");
	Иначе
		СтруктураЗакрытия = Новый Структура("Корзина", Корзина);
		Закрыть(СтруктураЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКорзиной

&НаКлиенте
Процедура КорзинаЦенаКоличествоПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.Корзина.ТекущиеДанные;
	
	СтрокаКорзины.Сумма = СтрокаКорзины.Цена * СтрокаКорзины.Количество;
	
	ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Корзина.Очистить();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодбор()
	
	СтруктураЗакрытия = Новый Структура("Корзина, ПеренестиВДокумент", Корзина, ПеренестиВДокумент);
	Закрыть(СтруктураЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	
КонецПроцедуры

//Обновляет итоги подобранных товаров в форме Корзина справочника Номенклатура
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиПодобранныхТоваров(Форма)
	
	Если ЗначениеЗаполнено(Форма.ОтборВидЦен) Тогда
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подобрано: %1 на сумму %2'"),
			Форма.Корзина.Итог("Количество"),
			Формат(Форма.Корзина.Итог("Сумма"),"ЧДЦ=2; ЧН=0"));
	Иначе
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подобрано: %1'"),
			Форма.Корзина.Итог("Количество")
			);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	ОписаниеОповещения = Новый ОписаниеОповещения("КорзинаХарактеристикаНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		МассивСкладов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборСклад);
	Иначе
		МассивСкладов = ВсеСклады();
	КонецЕсли;
	СтруктураПараметров.Вставить("ОтборСклад", МассивСкладов);
	СтруктураПараметров.Вставить("ВидЦены", ОтборВидЦен);
	СтруктураПараметров.Вставить("ПоказыватьСвободныеОстатки", ПоказыватьСвободныеОстатки);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораХарактеристики", СтруктураПараметров, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаХарактеристикаНачалоВыбораЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Характеристика = Результат;
	УстановитьЦенуНоменклатуры();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеСклады()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ПометкаУдаления = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура УстановитьЦенуНоменклатуры();

	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	
	ТекущиеДанные.Цена = ЦенаНоменклатуры(
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.Характеристика,
		ОтборВидЦен);
		
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
	ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦенаНоменклатуры(Номенклатура, Характеристика, ВидЦены)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьРеализацияТоваровУслуг(Команда)
	СоздатьДокумент("РеализацияТоваровУслуг");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекККМ(Команда)
	СоздатьДокумент("ЧекККМ");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеТоваровУслуг(Команда)
	СоздатьДокумент("ПриобретениеТоваровУслуг");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказКлиента(Команда)
	СоздатьДокумент("ЗаказКлиента");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПоставщику(Команда)
	СоздатьДокумент("ЗаказПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказНаПеремещение(Команда)
	СоздатьДокумент("ЗаказНаПеремещение");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдерНаПеремещениеТоваров(Команда)
	СоздатьДокумент("ОрдерНаПеремещениеТоваров");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеТоваров(Команда)
	СоздатьДокумент("ПеремещениеТоваров");
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Функция ПараметрыСозданияДокумента()
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидЦен", ОтборВидЦен);
	Если ЗначениеЗаполнено(ОтборСклад) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборСклад, "ЭтоГруппа") Тогда
		ДанныеЗаполнения.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Корзина");
	ПараметрыФормы.Вставить("ПараметрыКорзины", ЗаписатьПодборВХранилище());
	ПараметрыФормы.Вставить("ВидЦен", ОтборВидЦен);
	Если ЗначениеЗаполнено(ОтборСклад) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборСклад, "ЭтоГруппа") Тогда
		ПараметрыФормы.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
// Функция помещает результаты подбора в хранилище
//
// Возвращает структуру:
//	Структура
//		- Адрес в хранилище, куда помещена выбранная номенклатура (корзина);
//		- Уникальный идентификатор формы владельца, необходим для идентификации при обработке результатов подбора;
//
Функция ЗаписатьПодборВХранилище() 
	
	ПодобранныеТовары = Корзина.Выгрузить();
	АдресКорзиныВХранилище = ПоместитьВоВременноеХранилище(ПодобранныеТовары, УникальныйИдентификатор);
	Возврат Новый Структура("АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца", АдресКорзиныВХранилище, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция НазваниеДокумента(ИмяДокумента)

	СоответствиеИменДокументов = Новый Структура;
	СоответствиеИменДокументов.Вставить("ЧекККМ", НСтр("ru='Чек ККМ'"));
	СоответствиеИменДокументов.Вставить("ЗаказКлиента", НСтр("ru='Заказ клиента'"));
	СоответствиеИменДокументов.Вставить("ЗаказПоставщику", НСтр("ru='Заказ поставщику'"));
	СоответствиеИменДокументов.Вставить("РеализацияТоваровУслуг", НСтр("ru='Реализация товаров и услуг'"));
	СоответствиеИменДокументов.Вставить("ПриобретениеТоваровУслуг", НСтр("ru='Приобретение товаров и услуг'"));
	СоответствиеИменДокументов.Вставить("ПеремещениеТоваров", НСтр("ru='Перемещение товаров'"));
	СоответствиеИменДокументов.Вставить("ЗаказНаПеремещение", НСтр("ru='Заказ на перемещение'"));
	
	Если СоответствиеИменДокументов.Свойство(ИмяДокумента) Тогда
		Возврат СоответствиеИменДокументов[ИмяДокумента];
	Иначе
		Возврат ИмяДокумента;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента)
	
	//Если ИмяДокумента = "ЧекККМ" Тогда
	//	ИмяФормыДокумента = "Документ.ЧекККМ.Форма.ФормаДокументаРМК";
	//Иначе
	//	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента);
	//КонецЕсли;
	//
	//ПараметрыФормы = ПараметрыСозданияДокумента();
	//ОткрытаяФорма = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	//ЕстьОткрытыйДокумент = ЗначениеЗаполнено(ДокументОткрытый) И ТипЗнч(ДокументОткрытый) = Тип("ДокументСсылка." + ИмяДокумента);
	//Если ОткрытаяФорма.Открыта() ИЛИ ЕстьОткрытыйДокумент Тогда
	//	ДополнительныеПараметры = Новый Структура;
	//	// Для открытой формы передаем форму и параметр оповещения.
	//	ДополнительныеПараметры.Вставить("Форма", ОткрытаяФорма);
	//	ДополнительныеПараметры.Вставить("Параметр", 
	//		Новый Структура("ИмяДокумента, АдресКорзиныВХранилище", ИмяДокумента, ПараметрыФормы.ПараметрыКорзины.АдресКорзиныВХранилище));
	//	// Для новой формы передаем имя формы и параметры.
	//	ДополнительныеПараметры.Вставить("ИмяФормыДокумента", ИмяФормыДокумента);
	//	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	//	
	//	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ЕстьОткрытыйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//	ТекстВопроса = 
	//		СтрШаблон(НСтр("ru='Есть открытый ""%1"", оформленный из корзины.
	//		|Что сделать с набранным товаром?'"),
	//		НазваниеДокумента(ИмяДокумента));
	//	КнопкиВопроса = Новый СписокЗначений;
	//	КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Добавить в открытый'"));
	//	КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Создать новый'"));
	//	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, КнопкиВопроса);
	//Иначе
	//	ОткрытаяФорма.Открыть();
	//	ПеренестиВДокумент = Истина;
	//	ЗакрытьФормуПеренестиКорзину();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОткрытыйДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
		ПараметрыФормы.КлючНазначенияИспользования = "НовыйДокументИзКорзины";
		ОткрытьФорму(
			ДополнительныеПараметры.ИмяФормыДокумента,
			ПараметрыФормы,
			,
			Новый УникальныйИдентификатор);
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Оповестить("ДополнитьТовары", ДополнительныеПараметры.Параметр);
	КонецЕсли;
	
	ПеренестиВДокумент = Истина;
	ЗакрытьФормуПеренестиКорзину();
	
КонецПроцедуры

#КонецОбласти